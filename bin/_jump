# Script name: jump
version="1.0.0"
config_dir="$HOME/.config/jump"
config_file="$config_dir/config.json" # Path to your JSON file

show_help() {
  echo "Usage: jump [options] <arguments>"
  echo
  echo "Options:"
  echo "  -h,      --help       Show this help message and exit"
  echo "  -v,      --version    Show the version information"
  echo "  -l,      --list       List all alias keys"
  echo "  -ll,     --list-all   List all alias and paths"
  echo "  set,     <alias>      Set the alias for the directory"
  echo "  delete,  <alias>      Delete the directory alias"
  echo "  <alias>               Jump to the directory of the alias"
  echo
  echo "Example:"
  echo "  jump dotfiles"
  return 0
}


# Function to display version information
show_version() {
  echo "jump version $version"
  return 0
}

# Function to set up config directory and file
ensure_setup() {
  if [ ! -d "$config_dir" ]; then
    mkdir "$config_dir"
  fi
  if [ ! -s "$config_file" ]; then
    echo '{}' >"$config_file"
    set_alias "previous" true
    set_alias "current" true
  fi
}

# Function to set the directory to an alias
set_alias() {
  local alias_key="$1"
  local hide_message="$2"
  local aliased_directory="$3"
  if [ -z "$alias_key" ]; then
    echo "Usage: j set <key>"
    return 1
  fi
  if [[ -z "$aliased_directory" ]]; then
    aliased_directory=$(pwd)
  fi
  # Add the new key and current directory to the JSON file
  jq --arg key "$alias_key" --arg path "$aliased_directory" '. + {($key): $path}' "$config_file" >"$config_file.tmp" && mv "$config_file.tmp" "$config_file"
  if [[ ! "$hide_message" ]]; then
    echo "Directory saved as '$alias_key'"
  fi
}

# Function to delete alias for the directory
delete_alias() {
  local alias_key="$1"
  if [ -z "$alias_key" ]; then
    echo "Usage: j delete <key>"
    return 1
  fi
  # Remove the key from the JSON file
  jq --arg key "$alias_key" 'del(.[$key])' "$config_file" >"$config_file.tmp" && mv "$config_file.tmp" "$config_file"
  echo "Deleted alias '$alias_key'"
  return 0
}

# Function to list all alias names
list_alias() {
  selected_file=$(jq -r 'to_entries[] | "\(.key)"' "$config_file" | sort | fzf)
  if [[ -z $selected_file ]]; then
    return 0
  fi
  jump_to $selected_file
  return 0
}

# Function to list all alias names with paths
list_all() {
  jq -r 'to_entries[] | "\u001b[0;32m\(.key)\u001b[0m:\n  \u001b[0;34m\(.value)\u001b[0m"' "$config_file"
  return 0
}

# Function to jump to aliased directory
jump_to() {
  local alias_key=$1
  local path_to_dir=$(jq -r --arg key "$alias_key" '.[$key] // empty' "$config_file")
  if [[ -z "$path_to_dir" ]]; then
    echo "No directory found for key: $alias_key"
    return 1
  fi

  set_alias "previous" true
  if [[ ! -d "$path_to_dir" ]]; then
    echo "Directory not found: $path_to_dir"
    return 1
  fi

  set_alias "current" true $path_to_dir
  echo "===>$path_to_dir"
  return 0
}

main() {
  ensure_setup

  # Main function to parse and handle command-line arguments
  if [ $# -eq 0 ]; then
    list_alias
    return 0
  fi


  case "$1" in
  -h | --help)
    show_help
    ;;
  -v | --version)
    show_version
    ;;
  -l | list)
    list_alias
    ;;
  -ll | list-all)
    list_all
    ;;
  set)
    set_alias $2
    ;;
  delete)
    delete_alias $2
    ;;
  current)
    jump_to current
    ;;
  - | previous)
    jump_to previous
    ;;
  *)
    if [ "$2" ]; then
      echo "Incorrect number of arguments"
      return 1
    fi
    jump_to $1
    ;;
  esac
  return 0
}

main "$@"
