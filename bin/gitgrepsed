#!/bin/bash

# Function to show usage
usage() {
  echo "Usage: gitgrepsed [-e exclude_files] [-i include_files] search_string replace_string"
  echo "  -i  files/directories to include"
  echo "      example: './dir_1 file.txt'"
  echo "  -e  exclude pattern"
  echo "      example: '*.txt'"
  echo "  search_string   The string/pattern to search for"
  echo "  replace_string  The string/pattern to replace with"
  exit 1
}

# Default values for options
exclude_files=""
include_files=""

# Parse options using getopts
while getopts "e:i:" opt; do
  case "$opt" in
  e) exclude_files="$OPTARG" ;;
  i) include_files="$OPTARG" ;;
  *) usage ;;
  esac
done
shift $((OPTIND - 1))

# Check if enough arguments are provided
if [ $# -lt 2 ]; then
  usage
fi

search_string="$1"
replace_string="$2"

# Escape dots in filenames (for regex purposes)
# Ex. turns '*.txt' into '.*\.txt'
escape_dot() {
  echo "$1" | sed 's/\./\\./g' | sed 's/\*/\.\*/g'
}

# Start with the basic command
command="git ls-files"

# Include Files
if [ -n "$include_files" ]; then
  command="$command $include_files"
fi
# Exclude Files
if [ -n "$exclude_files" ]; then
  command="$command | grep -vE '$(escape_dot $exclude_files)'"
fi

# Run the final command to search and replace
# echo "$command | xargs grep -l '$search_string' | xargs sed -i '' 's|$search_string|$replace_string|g'"
eval "$command | xargs grep -l '$search_string' | xargs sed -i '' 's|$search_string|$replace_string|g'"
