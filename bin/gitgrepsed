#!/bin/bash

# Default values for options
exclude_files=""

# Function to show usage
usage() {
  echo "Usage: gitgrepsed [-e exclude_files] [-i include_files] search_string replace_string"
  echo "  -e  Comma-separated list of files to exclude (e.g., 'file1.go,file2.txt')"
  echo "  -i  Comma-separated list of files to include (e.g., 'file1.go,file2.txt')"
  echo "  search_string   The string to search for"
  echo "  replace_string  The string to replace with"
  exit 1
}

# Parse options using getopts
while getopts "e:i:" opt; do
  case "$opt" in
  e) exclude_files="$OPTARG" ;;
  i) include_files="$OPTARG" ;;
  *) usage ;;
  esac
done
shift $((OPTIND - 1))

# Check if enough arguments are provided
if [ $# -lt 2 ]; then
  usage
fi

search_string="$1"
replace_string="$2"

# Escape dots in filenames (for regex purposes)
escape_dot() {
  echo "$1" | sed 's/\./\\./g'
}

# Build the command for excluding files
exclude_command=""
if [ -n "$exclude_files" ]; then
  # Convert the comma-separated list to a regex-friendly format
  IFS=',' read -ra files <<<"$exclude_files"
  for file in "${files[@]}"; do
    # Escape dots in filenames
    escaped_file=$(escape_dot "$file")
    if [ -z "$exclude_command" ]; then
      exclude_command="grep -vE '$escaped_file'"
    else
      exclude_command="$exclude_command | grep -vE '$escaped_file'"
    fi
  done
fi

# Build the command for including files
include_command=""
if [ -n "$include_files" ]; then
  # Convert the comma-separated list to a regex-friendly format
  IFS=',' read -ra files <<<"$exclude_files"
  for file in "${files[@]}"; do
    # Escape dots in filenames
    escaped_file=$(escape_dot "$file")
    if [ -z "$exclude_command" ]; then
      exclude_command="grep -E '$escaped_file'"
    else
      exclude_command="$exclude_command | grep -E '$escaped_file'"
    fi
  done
fi

# Start with the basic command
command="git ls-files"
if [ -n "$exclude_command" ]; then
  command="$command | $exclude_command"
fi
if [ -n "$include_command" ]; then
  command="$command | $include_command"
fi

# Run the final command to search and replace
eval "$command | xargs grep -l '$search_string' | xargs sed -i '' 's|$search_string|$replace_string|g'"
